Description: A Sentry stack for AWS
Parameters:

  #### Required ####
  DBMasterUsername:
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Description: Username for database access
  DBMasterUserPassword:
    NoEcho: true
    Type: String
    Description: Password for database access - minimum 8 characters
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain 8 alphanumeric characters.
  SSLCertARN:
    Description: The ARN of the ACM cert
    Type: String
  KeyName:
    Description: Name of existing EC2 keypair to enable SSH access to the created
      instances
    Type: AWS::EC2::KeyPair::KeyName
  SentryAdminUser:
    Type: String
    MinLength: '1'
    MaxLength: '30'
    Description: Username for root sentry access
  SentryAdminPassword:
    NoEcho: true
    Type: String
    Description: Password for root sentry access - minimum 20 characters
    MinLength: '20'
  SentryPublicDnsName:
    Type: String
    Description: Host name that users will type to get to sentry.
  SentrySecretKey:
    Type: String
    Description: Private key for encrypting user sessions.
    MinLength: '50'
  SentryGithubAppId:
    Description: GitHub API App ID for SSO
    Type: String
  SentryGithubApiSecret:
    Description: GitHub API secret key for SSO
    Type: String
  SentryMailUsername:
    Description: SMTP username for sentry to use to send email
    Type: String
  SentryMailPassword:
    Description: SMTP password for sentry to use to send email
    Type: String
  SentryMailFrom:
    Description: Sending email address for sentry to use to send email
    Type: String

  #### Optional ####
  VpcCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: VPC Cidr block
    Default: 10.0.0.0/22
    Type: String
  VpcAvailabilityZone1:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1a
  VpcAvailabilityZone2:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1b
  VpcPublicSubnetCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/26
    Description: VPC CIDR Block for the Public Subnet
    Type: String
  VpcPublicSubnetCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.64/26
    Description: VPC CIDR Block for the Public Subnet
    Type: String
  VpcPrivateSubnetCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/26
    Description: VPC CIDR Block for the Private Subnet
    Type: String
  VpcPrivateSubnetCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.64/26
    Description: VPC CIDR Block for the Private Subnet
    Type: String
  ImageId:
    Description: The AMI to use for this Sentry - YUM compliant required
    Type: String
    Default: ami-6d48500b
  InstanceType:
    Description: The size of the EC2 instances
    Default: t2.medium
    Type: String
  DBName:
    Type: String
    Default: sentry
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBAllocatedStorage:
    Type: String
    Default: '5'
  DBBackupRetentionPeriod:
    Type: String
    Default: '7'
  DBInstanceClass:
    Type: String
    Default: db.t2.small
  DBMultiAZ:
    Type: String
    Default: true
    Description: Provides enhanced availablily for RDS
  DBStorageType:
    Type: String
    Default: gp2
  RedisEngineVersion:
    Type: String
    Description: Version of Redis engine to use.
    Default: '3.2.4'
  RedisNodeType:
    Type: String
    Default: cache.t2.small
  RedisNumNodes:
    Type: String
    Default: '1'
  SentryMailHost:
    Description: SMTP host for sentry to use to send email
    Type: String
    Default: email-smtp.eu-west-1.amazonaws.com
  SentryMailPort:
    Description: SMTP port for sentry to use to send email
    Type: String
    Default: '25'
  ScalingMinNodes:
    Type: Number
    Description: Minium size of the auto scaling group
    Default: 1
  ScalingMaxNodes:
    Type: Number
    Description: Maximum size of the auto scaling group
    Default: 2

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ###### Network ######
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock:
        Ref: VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: VpcAvailabilityZone1}
      CidrBlock: {Ref: VpcPublicSubnetCIDR1}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'public', {Ref: VpcAvailabilityZone2}]
      VpcId: {Ref: VPC}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: VpcAvailabilityZone2}
      CidrBlock: {Ref: VpcPublicSubnetCIDR2}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'public', {Ref: VpcAvailabilityZone2}]
      VpcId: {Ref: VPC}

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: VpcAvailabilityZone1}
      CidrBlock: {Ref: VpcPrivateSubnetCIDR1}
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'private', {Ref: VpcAvailabilityZone2}]
      VpcId: {Ref: VPC}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: VpcAvailabilityZone2}
      CidrBlock: {Ref: VpcPrivateSubnetCIDR2}
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'private', {Ref: VpcAvailabilityZone2}]
      VpcId: {Ref: VPC}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  ###### Public Routing ######
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'public']
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1

  PublicSubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  ###### Private Routing ######
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'private-1']
      VpcId:
        Ref: VPC

  PrivateSubnetAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet1

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT1:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1

  NATRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'private-2']
      VpcId:
        Ref: VPC

  PrivateSubnetAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      SubnetId:
        Ref: PrivateSubnet2

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT2:
    DependsOn: GatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2

  NATRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2

  ###### Redis ######
  RedisAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Allows access only to sentry redis cluster
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'RedisAccess']

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Senty redis cluster source
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '6379'
        ToPort: '6379'
        SourceSecurityGroupId:
          Ref: RedisAccessSecurityGroup
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'Redis']

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Sentry stack redis subnet group
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  RedisCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType:
        Ref: RedisNodeType
      CacheSubnetGroupName:
        Ref: RedisSubnetGroup
      Engine: redis
      EngineVersion:
        Ref: RedisEngineVersion
      NumCacheNodes:
        Ref: RedisNumNodes
      VpcSecurityGroupIds:
      - Ref: RedisSecurityGroup

  ###### Postgres ######
  PostgresAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Allows access only to sentry postgres instance
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'PostgresAccess']

  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '5432'
        IpProtocol: tcp
        FromPort: '5432'
        SourceSecurityGroupId:
          Ref: PostgresAccessSecurityGroup
      VpcId:
        Ref: VPC
      GroupDescription: Senty postgres instance source
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'Postgres']

  PostgresSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Sentry stack postgres subnet group
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  PostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage:
        Ref: DBAllocatedStorage
      BackupRetentionPeriod:
        Ref: DBBackupRetentionPeriod
      DBInstanceClass:
        Ref: DBInstanceClass
      DBName:
        Ref: DBName
      Engine: postgres
      MasterUsername:
        Ref: DBMasterUsername
      MasterUserPassword:
        Ref: DBMasterUserPassword
      MultiAZ:
        Ref: DBMultiAZ
      Port: '5432'
      PubliclyAccessible: 'false'
      StorageEncrypted: 'true'
      StorageType:
        Ref: DBStorageType
      VPCSecurityGroups:
      - Ref: PostgresSecurityGroup
      DBSubnetGroupName:
        Ref: PostgresSubnetGroup

  ###### File Storage ######
  SentryFilesUser:
    Type: AWS::IAM::User

  SentryFilesUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: SentryFilesUser

  SentryFilesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
        - ''
        - - Ref: AWS::AccountId
          - "-"
          - Ref: AWS::StackName
          - "-sentry-files"
      AccessControl: Private

  SentryFilesS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SentryFilesS3Bucket
      PolicyDocument: 
        Statement: 
          - Action: "*"
            Effect: "Allow"
            Resource:
              Fn::Join:
              - ''
              - - !GetAtt SentryFilesS3Bucket.Arn
                - "/*"
            Principal:
              AWS:
                !GetAtt SentryFilesUser.Arn

  ###### App Server ######
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        CidrIp: 0.0.0.0/0
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        CidrIpv6: ::/0
      VpcId:
        Ref: VPC
      GroupDescription: An ELB group allowing access only to from the corresponding
        component
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'LoadBalancer']

  SentryElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Listeners:
      - InstancePort: '443'
        Protocol: HTTPS
        InstanceProtocol: HTTPS
        LoadBalancerPort: '443'
        SSLCertificateId:
          Ref: SSLCertARN
        PolicyNames:
          - SSLNegotiationPolicy
      Policies:
      - PolicyName : SSLNegotiationPolicy
        PolicyType: SSLNegotiationPolicyType
        Attributes:
        - Name: Protocol-TLSv1.2
          Value: 'true'
        - Name: Server-Defined-Cipher-Order
          Value: 'true'
        - Name: ECDHE-ECDSA-AES128-GCM-SHA256
          Value: 'true'
        - Name: ECDHE-RSA-AES128-GCM-SHA256
          Value: 'true'
        - Name: ECDHE-ECDSA-AES128-SHA256
          Value: 'true'
        - Name: ECDHE-RSA-AES128-SHA256
          Value: 'true'
        - Name: ECDHE-ECDSA-AES256-GCM-SHA384
          Value: 'true'
        - Name: ECDHE-RSA-AES256-GCM-SHA384
          Value: 'true'
        - Name: ECDHE-ECDSA-AES256-SHA384
          Value: 'true'
        - Name: ECDHE-RSA-AES256-SHA384
          Value: 'true'
        - Name: AES128-GCM-SHA256
          Value: 'true'
        - Name: AES128-SHA256
          Value: 'true'
        - Name: AES256-GCM-SHA384
          Value: 'true'
        - Name: AES256-SHA256
          Value: 'true'
      CrossZone: false
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      HealthCheck:
        HealthyThreshold: 3
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 10
        Target: HTTPS:443/_health/

  SentrySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - ToPort: '443'
        IpProtocol: tcp
        FromPort: '443'
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      VpcId:
        Ref: VPC
      GroupDescription: Sentry instance security group, gives access to from load balancer
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, 'Sentry']

  SentryLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: ImageId
      SecurityGroups:
      - Ref: SentrySecurityGroup
      - Ref: PostgresAccessSecurityGroup
      - Ref: RedisAccessSecurityGroup
      InstanceType:
        Ref: InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeSize: '10'
          Encrypted: 'true'
      UserData:
        Fn::Base64:
          !Sub
          - |
            #cloud-config
            runcmd:
            - apt-get update
            - apt-get install ansible -y
            - openssl req -new -nodes -x509 -subj "/C=GB/ST=London/L=London/O=Private/CN=${AWS::StackName}" -days 3650 -keyout /tmp/server.key -out /tmp/bundle.crt -extensions v3_ca
            - curl https://github.com/o2Labs/sentry-formation/archive/master.zip --output /tmp/repo.zip --location
            - tar -xzvf /tmp/repo.zip -C /tmp/
            - SENTRY_ADMIN_USER=${SentryAdminUser} SENTRY_ADMIN_PASSWORD=${SentryAdminPassword} SENTRY_PUBLIC_DNS_NAME=${SentryPublicDnsName} SENTRY_SECRET_KEY=${SentrySecretKey} SENTRY_GITHUB_APP_ID=${SentryGithubAppId} SENTRY_GITHUB_API_SECRET=${SentryGithubApiSecret} SENTRY_MAIL_HOST=${SentryMailHost} SENTRY_MAIL_PORT=${SentryMailPort} SENTRY_MAIL_USERNAME=${SentryMailUsername} SENTRY_MAIL_PASSWORD=${SentryMailPassword} SENTRY_MAIL_FROM=${SentryMailFrom} SENTRY_FILES_ACCESS_KEY=${SentryFilesUserKey} SENTRY_FILES_SECRET_KEY=${SentryFilesSecretAccessKey} SENTRY_FILES_BUCKET_NAME=${AWS::AccountId}-${AWS::StackName}-sentry-files SENTRY_URL=${SentryUrl} SENTRY_DB_HOST=${DBHost} SENTRY_DB_PORT=5432 SENTRY_DB_NAME=${DBName} SENTRY_DB_USER=${DBMasterUsername} SENTRY_DB_PASSWORD=${DBMasterUserPassword} SENTRY_REDIS_HOST=${RedisHost} SENTRY_REDIS_PORT=6379 ansible-playbook /tmp/sentry-formation-master/deployment/site.yml -i /tmp/sentry-formation-master/deployment/deployment_hosts --limit local_sentry
          - SentryFilesSecretAccessKey: !GetAtt SentryFilesUserKey.SecretAccessKey
            SentryUrl: !GetAtt SentryElasticLoadBalancer.DNSName
            DBHost: !GetAtt PostgresInstance.Endpoint.Address
            RedisHost: !GetAtt RedisCacheCluster.RedisEndpoint.Address

  SentryAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        MaxBatchSize: 1
        MinInstancesInService: 1
    Properties:
      LoadBalancerNames:
      - Ref: SentryElasticLoadBalancer
      MinSize: 
        Ref: ScalingMinNodes
      MaxSize:
        Ref: ScalingMaxNodes
      LaunchConfigurationName:
        Ref: SentryLaunchConfiguration
      Tags:
      - PropagateAtLaunch: true
        Key: Name
        Value:
          Ref: AWS::StackName
      VPCZoneIdentifier:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2

  SentryScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      ScalingAdjustment: 1
      AutoScalingGroupName:
        Ref: SentryAutoScalingGroup
      AdjustmentType: ChangeInCapacity
